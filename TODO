*** core integration: 
why do we need to pass in a root_die& just to get attrs?
-- answer, it's complicated (see below)
fix base().base().base() problem
move all the crufty old stuff into compat/*; add compat.hpp and include compat/*

-- design of stacking, passing roots & specs around etc.:
- whenever we encapsulate an attribute, we need a root 
- this is because encapsulated *references* must be convertible to iterators, so need a root
- it also fixes the spec with which the attributes are interpreted
- when a DIE payload participates in >1 root (e.g. in a stacking scenario)...
- ... its enclosing CU payload must also participate in both
- ... HOWEVER, CU impls are special and can have different *attributes* for different roots
- ... e.g. the DW_AT_ranges of a CU is necessarily different between one root
- ... and another root in which an extra subprogram has been added
- ... FIXME: implement the magic in compile_unit_die that will implement this
- ... FIXME: hmm, this must *also* be true for others, e.g. a subprogram_die with modified hipc?
- ... HMM. We could just say "no such alterations", hence avoiding any need for CU magic
- ... if you want to define new DIEs, it's probably in a fresh CU anyway

optimisation:
make dwarfpplibdump comparable to dwarfdump

implementation completeness: 
replace uses of dynamic_cast<Die&> with a solution that's robust to non-libdwarf impls

API completion:
more const+nonconst completeness (accessors, iterators)

code cleanup:
remove commented-out old code
remove/verbosify unwanted debug printouts
fix tabs
remove std:: and boost:: and dwarf:: where appropriate
move stuff from headers to cpp files
eliminate deprecation warnings
minimal autotoolification

work in progress:
Doxygen
expression evaluator doesn't support many opcodes
dwarfppdump doesn't prettyprint everything

multi-standard stuff:
DWARF3 or DEFAULT_DWARF_SPEC is hardcoded in places
spec should be per-CU or per DIE not per dieset
DW_AT_MIPS_linkage_name is used where it shouldn't be
add support for guessing vendor extensions using compile unit string

semantics:
testing equality on p_ds meaning "is this the same DIE?" should be defined (by position()?)

other bits of DWARF:
line number program

possible future stuff:






-------------------------ARCHIVE interest only
make operator* on iterators dereference pointers too? arguments...
 -- YES. analogue with  containers
 -- NO. analogue with containers-of-pointers
 -- can we hide the fact that we contain pointers from the user completely?
 -- possibly YES, making iterators the *only* public interface, but this is a big change;
    for now NO; the user should understand it as a container of pointers
	BUT this is a future-work API change

a similar theme: refactoring the pointer/iterator split:

libdwarf gives us handles that are
- freely copyable
- not backwards-navigable
- need manual bookkeeping of copies

dwarf::lib turns these into handles that are
- not copyable
- backwards navigable, slowly
- RAII

but the only way to make these copyable 
... without giving up on automatic resource management
is to make them handle/body
- question is how to do this
  while avoiding too much heap allocation/deallocation
             and too many libdwarf die/release calls

shared_ptrs to these are 
- copyable

iterators are
- copyable
- cheaply backwards-navigable
- lazy about gaining underlying DIE resources
... but do so on any navigation! and then release them again?!

so I think the main win would be to support navigation without
superfluous creation of new DIEs

at the moment, iterator ++ will
- create a new lib::die,
  get its offset,
  store the offset in the iterator
  destroy the DIE
  
then when we access it, we will go back to libdwarf and get the DIE

we might instead want an invariant where
every iterator also has a pointer to a lib::die
and when we do ++ on an iterator,
we keep a pointer to the new DIE

nontrivial consequences: at the moment we typically pass shared_ptrs
by value. 
if we do this to our combined iterator/pointer, it means that 
any methods that take shared_ptr arguments
will get a copy of the shared_ptr piece of our iterator,
but not the iterator part.
if they subsequently do any navigation,
it will happen the old/slow way.
but I think it will still work.

HOWEVER, we do want to deprecate the navigation interface
on the basic_die. Perhaps we can arrange for a compiler warning
on using the old interface? __attribute__((deprecated))?

handle printing by splitting parent printout into iterator <<

"position 0x , child of 0x, contains " "DIE, ...




depthfirst navigation in libdwarfpp: a history

depthfirst encapsulation in first encap impl
depthfirst treewalker templates added soon after
depthfirst traversal in DIE
depthfirst iterator rewrite
