template <class Rep> class Die_abstract_array_type;
template <class Rep> class Die_abstract_class_type;
template <class Rep> class Die_abstract_entry_point;
template <class Rep> class Die_abstract_enumeration_type;
template <class Rep> class Die_abstract_formal_parameter;
template <class Rep> class Die_abstract_imported_declaration;
template <class Rep> class Die_abstract_label;
template <class Rep> class Die_abstract_lexical_block;
template <class Rep> class Die_abstract_member;
template <class Rep> class Die_abstract_pointer_type;
template <class Rep> class Die_abstract_reference_type;
template <class Rep> class Die_abstract_compile_unit;
template <class Rep> class Die_abstract_string_type;
template <class Rep> class Die_abstract_structure_type;
template <class Rep> class Die_abstract_subroutine_type;
template <class Rep> class Die_abstract_typedef;
template <class Rep> class Die_abstract_union_type;
template <class Rep> class Die_abstract_unspecified_parameters;
template <class Rep> class Die_abstract_variant;
template <class Rep> class Die_abstract_common_block;
template <class Rep> class Die_abstract_common_inclusion;
template <class Rep> class Die_abstract_inheritance;
template <class Rep> class Die_abstract_inlined_subroutine;
template <class Rep> class Die_abstract_module;
template <class Rep> class Die_abstract_ptr_to_member_type;
template <class Rep> class Die_abstract_set_type;
template <class Rep> class Die_abstract_subrange_type;
template <class Rep> class Die_abstract_with_stmt;
template <class Rep> class Die_abstract_access_declaration;
template <class Rep> class Die_abstract_base_type;
template <class Rep> class Die_abstract_catch_block;
template <class Rep> class Die_abstract_const_type;
template <class Rep> class Die_abstract_constant;
template <class Rep> class Die_abstract_enumerator;
template <class Rep> class Die_abstract_file_type;
template <class Rep> class Die_abstract_friend;
template <class Rep> class Die_abstract_namelist;
template <class Rep> class Die_abstract_namelist_item;
template <class Rep> class Die_abstract_packed_type;
template <class Rep> class Die_abstract_subprogram;
template <class Rep> class Die_abstract_template_type_parameter;
template <class Rep> class Die_abstract_template_value_parameter;
template <class Rep> class Die_abstract_thrown_type;
template <class Rep> class Die_abstract_try_block;
template <class Rep> class Die_abstract_variant_part;
template <class Rep> class Die_abstract_variable;
template <class Rep> class Die_abstract_volatile_type;
template <class Rep> class Die_abstract_dwarf_procedure;
template <class Rep> class Die_abstract_restrict_type;
template <class Rep> class Die_abstract_interface_type;
template <class Rep> class Die_abstract_namespace;
template <class Rep> class Die_abstract_imported_module;
template <class Rep> class Die_abstract_unspecified_type;
template <class Rep> class Die_abstract_partial_unit;
template <class Rep> class Die_abstract_imported_unit;
template <class Rep> class Die_abstract_condition;
template <class Rep> class Die_abstract_shared_type;
} namespace abstract {
template <class Rep>struct tag<Rep, DW_TAG_array_type> { typedef abstract::Die_abstract_array_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_class_type> { typedef abstract::Die_abstract_class_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_entry_point> { typedef abstract::Die_abstract_entry_point<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_enumeration_type> { typedef abstract::Die_abstract_enumeration_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_formal_parameter> { typedef abstract::Die_abstract_formal_parameter<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_imported_declaration> { typedef abstract::Die_abstract_imported_declaration<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_label> { typedef abstract::Die_abstract_label<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_lexical_block> { typedef abstract::Die_abstract_lexical_block<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_member> { typedef abstract::Die_abstract_member<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_pointer_type> { typedef abstract::Die_abstract_pointer_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_reference_type> { typedef abstract::Die_abstract_reference_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_compile_unit> { typedef abstract::Die_abstract_compile_unit<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_string_type> { typedef abstract::Die_abstract_string_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_structure_type> { typedef abstract::Die_abstract_structure_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_subroutine_type> { typedef abstract::Die_abstract_subroutine_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_typedef> { typedef abstract::Die_abstract_typedef<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_union_type> { typedef abstract::Die_abstract_union_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_unspecified_parameters> { typedef abstract::Die_abstract_unspecified_parameters<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_variant> { typedef abstract::Die_abstract_variant<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_common_block> { typedef abstract::Die_abstract_common_block<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_common_inclusion> { typedef abstract::Die_abstract_common_inclusion<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_inheritance> { typedef abstract::Die_abstract_inheritance<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_inlined_subroutine> { typedef abstract::Die_abstract_inlined_subroutine<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_module> { typedef abstract::Die_abstract_module<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_ptr_to_member_type> { typedef abstract::Die_abstract_ptr_to_member_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_set_type> { typedef abstract::Die_abstract_set_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_subrange_type> { typedef abstract::Die_abstract_subrange_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_with_stmt> { typedef abstract::Die_abstract_with_stmt<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_access_declaration> { typedef abstract::Die_abstract_access_declaration<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_base_type> { typedef abstract::Die_abstract_base_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_catch_block> { typedef abstract::Die_abstract_catch_block<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_const_type> { typedef abstract::Die_abstract_const_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_constant> { typedef abstract::Die_abstract_constant<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_enumerator> { typedef abstract::Die_abstract_enumerator<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_file_type> { typedef abstract::Die_abstract_file_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_friend> { typedef abstract::Die_abstract_friend<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_namelist> { typedef abstract::Die_abstract_namelist<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_namelist_item> { typedef abstract::Die_abstract_namelist_item<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_packed_type> { typedef abstract::Die_abstract_packed_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_subprogram> { typedef abstract::Die_abstract_subprogram<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_template_type_parameter> { typedef abstract::Die_abstract_template_type_parameter<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_template_value_parameter> { typedef abstract::Die_abstract_template_value_parameter<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_thrown_type> { typedef abstract::Die_abstract_thrown_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_try_block> { typedef abstract::Die_abstract_try_block<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_variant_part> { typedef abstract::Die_abstract_variant_part<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_variable> { typedef abstract::Die_abstract_variable<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_volatile_type> { typedef abstract::Die_abstract_volatile_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_dwarf_procedure> { typedef abstract::Die_abstract_dwarf_procedure<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_restrict_type> { typedef abstract::Die_abstract_restrict_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_interface_type> { typedef abstract::Die_abstract_interface_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_namespace> { typedef abstract::Die_abstract_namespace<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_imported_module> { typedef abstract::Die_abstract_imported_module<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_unspecified_type> { typedef abstract::Die_abstract_unspecified_type<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_partial_unit> { typedef abstract::Die_abstract_partial_unit<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_imported_unit> { typedef abstract::Die_abstract_imported_unit<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_condition> { typedef abstract::Die_abstract_condition<Rep> type; };
template <class Rep>struct tag<Rep, DW_TAG_shared_type> { typedef abstract::Die_abstract_shared_type<Rep> type; };
} namespace abstract {
